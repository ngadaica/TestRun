@model List<TrueTestRun.Models.Request>
@{
    ViewBag.Title = ViewBag.CurrentPhaseTitle ?? HttpContext.GetGlobalResourceObject("Resources", "RequestListByPhase").ToString();
    Layout = "~/Views/Shared/_Layout.cshtml";
    var currentUser = Session["CurrentUser"] as TrueTestRun.Models.User;
    var phase = ViewBag.CurrentPhase as TrueTestRun.Models.TestRunPhase?;

    // Helper hàm cho phân quyền
    bool IsStaff = (currentUser != null && currentUser.Title != null)
        ? currentUser.Title.Trim().Equals("Staff", StringComparison.OrdinalIgnoreCase)
        : false;

    bool IsManagerOrGM = (currentUser != null && currentUser.Title != null) &&
        (
            currentUser.Title.Trim().Equals("Quản lý sơ cấp", StringComparison.OrdinalIgnoreCase)
            || currentUser.Title.Trim().Equals("Quản lý trung cấp", StringComparison.OrdinalIgnoreCase)
            || currentUser.Title.Trim().Equals("G.M", StringComparison.OrdinalIgnoreCase)
        );

    bool IsAdmin = (currentUser != null && currentUser.Role != null)
        ? currentUser.Role == TrueTestRun.Models.UserRole.Admin
        : false;

    // Định nghĩa màu sắc và icon cho từng phase
    string phaseColor = "";
    string phaseIcon = "";
    string phaseBadgeClass = "";

    switch (phase)
    {
        case TrueTestRun.Models.TestRunPhase.TruocTestRun:
            phaseColor = "primary";
            phaseIcon = "🚀";
            phaseBadgeClass = "bg-primary";
            break;
        case TrueTestRun.Models.TestRunPhase.GiuaTestRun:
            phaseColor = "warning";
            phaseIcon = "⚙️";
            phaseBadgeClass = "bg-warning text-dark";
            break;
        case TrueTestRun.Models.TestRunPhase.SauTestRun:
            phaseColor = "success";
            phaseIcon = "🏁";
            phaseBadgeClass = "bg-success";
            break;
        default:
            phaseColor = "secondary";
            phaseIcon = "📋";
            phaseBadgeClass = "bg-secondary";
            break;
    }
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>@ViewBag.Title</h2>
    @if (IsStaff)
    {
        <a href="@Url.Action("Create", "Request")" class="btn btn-success">
            <span style="font-size:1em;">➕</span> @HttpContext.GetGlobalResourceObject("Resources", "CreateNewRequest")
        </a>
    }
</div>

<!-- Compact Phase Navigation -->
<div class="phase-tabs-container mb-2">
    <div class="phase-tabs">
        <a class="phase-tab @(phase == TrueTestRun.Models.TestRunPhase.TruocTestRun ? "active" : "")"
           href="@Url.Action("TruocTestRun", "Request")">
            <div class="phase-tab-content">
                <span class="phase-tab-icon">🚀</span>
                <span class="phase-tab-text">@HttpContext.GetGlobalResourceObject("Resources", "BeforeTestRun")</span>
            </div>
        </a>
        <a class="phase-tab @(phase == TrueTestRun.Models.TestRunPhase.GiuaTestRun ? "active" : "")"
           href="@Url.Action("GiuaTestRun", "Request")">
            <div class="phase-tab-content">
                <span class="phase-tab-icon">⚙️</span>
                <span class="phase-tab-text">@HttpContext.GetGlobalResourceObject("Resources", "DuringTestRun")</span>
            </div>
        </a>
        <a class="phase-tab @(phase == TrueTestRun.Models.TestRunPhase.SauTestRun ? "active" : "")"
           href="@Url.Action("SauTestRun", "Request")">
            <div class="phase-tab-content">
                <span class="phase-tab-icon">🏁</span>
                <span class="phase-tab-text">@HttpContext.GetGlobalResourceObject("Resources", "AfterTestRun")</span>
            </div>
        </a>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show custom-alert" role="alert">
        <span style="font-size:1.1em;">✅</span> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show custom-alert" role="alert">
        <span style="font-size:1.1em;">⚠️</span> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (!Model.Any())
{
    <div class="empty-state-card">
        <div class="empty-state-content">
            <div class="empty-state-icon">
                <span style="font-size:4em;">@phaseIcon</span>
            </div>
            <h3 class="empty-state-title">@HttpContext.GetGlobalResourceObject("Resources", "NoRequestsYet")</h3>
            <p class="empty-state-text">
                @HttpContext.GetGlobalResourceObject("Resources", "NoRequestsInPhase") <strong>@ViewBag.CurrentPhaseTitle</strong>.
            </p>
            @if (IsStaff)
            {
                <a href="@Url.Action("Create", "Request")" class="btn btn-success mt-3">
                    <span style="font-size:1.1em;">➕</span> @HttpContext.GetGlobalResourceObject("Resources", "CreateFirstRequest")
                </a>
            }
        </div>
    </div>
}
else
{
    <!-- Compact Statistics Cards -->
    <div class="row mb-2">
        <div class="col-md-4">
            <div class="stats-card stats-card-total">
                <div class="stats-card-content">
                    <div class="stats-icon">
                        <span style="font-size:1.5em;">📊</span>
                    </div>
                    <div class="stats-info">
                        <div class="stats-number">@Model.Count</div>
                        <div class="stats-label">@HttpContext.GetGlobalResourceObject("Resources", "TotalRequests")</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="stats-card stats-card-processing">
                <div class="stats-card-content">
                    <div class="stats-icon">
                        <span style="font-size:1.5em;">⏳</span>
                    </div>
                    <div class="stats-info">
                        <div class="stats-number">@Model.Count(r => !r.IsCompleted && !r.IsRejected)</div>
                        <div class="stats-label">@HttpContext.GetGlobalResourceObject("Resources", "Processing")</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="stats-card stats-card-today">
                <div class="stats-card-content">
                    <div class="stats-icon">
                        <span style="font-size:1.5em;">📅</span>
                    </div>
                    <div class="stats-info">
                        <div class="stats-number">@Model.Count(r => r.CreatedAt.Date == DateTime.Today)</div>
                        <div class="stats-label">@HttpContext.GetGlobalResourceObject("Resources", "Today")</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Table - Enlarged Display Area -->
    <div class="requests-table-container requests-table-large">
        <div class="table-header">
            <h4 class="table-title mb-0">
                <span style="font-size:1.2em;">📋</span> @HttpContext.GetGlobalResourceObject("Resources", "RequestList") - @ViewBag.CurrentPhaseTitle
            </h4>
            <div class="table-actions">
                <button class="btn btn-outline-secondary btn-sm" onclick="refreshTable()">
                    <span style="font-size:0.9em;">🔄</span> @HttpContext.GetGlobalResourceObject("Resources", "Refresh")
                </button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-enhanced table-large">
                <thead class="table-head-enhanced">
                    <tr>
                        <th class="col-request-id">
                            <span style="font-size:1em;">🆔</span> Request ID
                        </th>
                        <th class="col-created">
                            <span style="font-size:1em;">📅</span> @HttpContext.GetGlobalResourceObject("Resources", "CreatedDate")
                        </th>
                        <th class="col-creator">
                            <span style="font-size:1em;">👤</span> @HttpContext.GetGlobalResourceObject("Resources", "Creator")
                        </th>
                        <th class="col-current-step">
                            <span style="font-size:1em;">📍</span> @HttpContext.GetGlobalResourceObject("Resources", "CurrentStep")
                        </th>
                        <th class="col-status">
                            <span style="font-size:1em;">📊</span> @HttpContext.GetGlobalResourceObject("Resources", "Status")
                        </th>
                        <th class="col-actions text-center">
                            <span style="font-size:1em;">⚙️</span> @HttpContext.GetGlobalResourceObject("Resources", "Actions")
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var request in Model)
                    {
                        var historyList = request.History?.OrderBy(h => h.Index).ToList();
                        TrueTestRun.Models.WorkflowStep currentStep = null;

                        if (historyList != null && historyList.Count > 0)
                        {
                            if (request.CurrentStepIndex >= 0 && request.CurrentStepIndex < historyList.Count)
                            {
                                currentStep = historyList[request.CurrentStepIndex];
                            }
                            else if (historyList.Count > 0)
                            {
                                currentStep = historyList.FirstOrDefault(s => s.Status == "Processing") ?? historyList[0];
                            }
                        }

                        bool canEdit = IsStaff && request.CreatedByADID == currentUser?.ADID && !request.IsCompleted && !request.IsRejected;
                        bool canApprove = IsManagerOrGM && currentStep != null &&
                            (currentStep.NextApproverADID == currentUser?.ADID
                            || (string.IsNullOrEmpty(currentStep.NextApproverADID)
                                && currentStep.DeptCode == currentUser?.DeptCode
                                && currentStep.Role == currentUser?.Title))
                            && !request.IsCompleted && !request.IsRejected;
                        bool canAdminEdit = IsAdmin;

                        <tr class="table-row-enhanced">
                            <td class="col-request-id">
                                <a href="@Url.Action("Detail", "Request", new { id = request.RequestID })"
                                   class="request-id-link">
                                    <span style="font-size:1em;">📄</span> @request.RequestID
                                </a>
                            </td>
                            <td class="col-created">
                                <div class="date-info">
                                    <div class="date-primary">@request.CreatedAt.ToString("dd/MM/yyyy")</div>
                                    <div class="date-secondary">@request.CreatedAt.ToString("HH:mm")</div>
                                </div>
                            </td>
                            <td class="col-creator">
                                <div class="creator-info">
                                    <span class="creator-name">@request.CreatedByADID</span>
                                </div>
                            </td>
                            <td class="col-current-step">
                                @if (currentStep != null && !string.IsNullOrEmpty(currentStep.StepName))
                                {
                                    <span class="badge step-badge @phaseBadgeClass">
                                        <span style="font-size:0.8em;">📍</span> @currentStep.StepName
                                    </span>
                                }
                                else
                                {
                                    <span class="badge step-badge bg-secondary">
                                        <span style="font-size:0.8em;">❓</span> @HttpContext.GetGlobalResourceObject("Resources", "Unknown")
                                    </span>
                                }
                            </td>
                            <td class="col-status">
                                @if (request.IsCompleted)
                                {
                                    <span class="badge status-badge status-completed">
                                        <span style="font-size:0.8em;">✅</span> @HttpContext.GetGlobalResourceObject("Resources", "Completed")
                                    </span>
                                }
                                else if (request.IsRejected)
                                {
                                    <span class="badge status-badge status-rejected">
                                        <span style="font-size:0.8em;">❌</span> @HttpContext.GetGlobalResourceObject("Resources", "Rejected")
                                    </span>
                                }
                                else
                                {
                                    <span class="badge status-badge status-processing">
                                        <span style="font-size:0.8em;">⏳</span> @HttpContext.GetGlobalResourceObject("Resources", "Processing")
                                    </span>
                                }
                            </td>
                            <td class="col-actions text-center">
                                <div class="action-buttons">
                                    <a href="@Url.Action("Detail", "Request", new { id = request.RequestID })"
                                       class="btn btn-action btn-view"
                                       title="@HttpContext.GetGlobalResourceObject("Resources", "ViewDetails")">
                                        <span style="font-size:1em;">👁️</span>
                                    </a>
                                    <button type="button" class="btn btn-action btn-documents" onclick="viewDocuments('@request.RequestID')" title="@HttpContext.GetGlobalResourceObject("Resources", "ViewDocuments")">
                                        <span style="font-size:1em;">📎</span>
                                    </button>
                                    @if (canEdit || canAdminEdit)
                                    {
                                        <a href="@Url.Action("Edit", "Request", new { id = request.RequestID })"
                                           class="btn btn-action btn-edit"
                                           title="@HttpContext.GetGlobalResourceObject("Resources", "Edit")">
                                            <span style="font-size:1em;">✏️</span>
                                        </a>
                                    }
                                    @if (canApprove)
                                    {
                                        <a href="@Url.Action("ProcessRequest", "Approval", new { id = request.RequestID })"
                                           class="btn btn-action btn-approve"
                                           title="@HttpContext.GetGlobalResourceObject("Resources", "ApprovalProcess")">
                                            <span style="font-size:1em;">✅</span>
                                        </a>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="table-footer">
            <div class="table-summary">
                <span style="font-size:1em;">📊</span>
                @HttpContext.GetGlobalResourceObject("Resources", "ShowingResults") <strong>@Model.Count</strong> @HttpContext.GetGlobalResourceObject("Resources", "RequestsInPhase") <strong>@ViewBag.CurrentPhaseTitle</strong>
            </div>
        </div>
    </div>
}

<!-- Modal hiển thị danh sách tài liệu -->
<div class="modal fade" id="documentsModal" tabindex="-1" aria-labelledby="documentsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="documentsModalLabel">
                    <span style="font-size:1.1em;">📎</span> Tài liệu đính kèm
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="documentsContent">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Đang tải...</span>
                        </div>
                        <div class="mt-2">Đang tải danh sách tài liệu...</div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <span style="font-size:0.9em;">❌</span> Đóng
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Auto dismiss alerts after 5 seconds
            setTimeout(function () {
                $('.alert').fadeOut('slow');
            }, 5000);

            // Initialize tooltips
            $('[title]').tooltip();

            // Auto refresh every 30 seconds
            setTimeout(function () {
                location.reload();
            }, 30000);

            // Add hover effects
            $('.table-row-enhanced').hover(
                function () { $(this).addClass('row-hover'); },
                function () { $(this).removeClass('row-hover'); }
            );
        });

        function refreshTable() {
            location.reload();
        }

        function viewDocuments(requestId) {
            if (!requestId || requestId === 'undefined' || requestId === 'null') {
                alert('Lỗi: Request ID không hợp lệ');
                return;
            }

            // Cập nhật title modal
            $('#documentsModalLabel').html('<span style="font-size:1.1em;">📎</span> Tài liệu đính kèm - ' + requestId);

            $('#documentsModal').modal('show');

            $.ajax({
                url: '@Url.Action("GetDocuments", "Document")',
                type: 'GET',
                data: { requestId: requestId },
                dataType: 'json',
                success: function(response) {
                    if (response && response.success === true) {
                        displayDocuments(response.documents);
                    } else {
                        $('#documentsContent').html(
                            '<div class="alert alert-warning">' +
                                '<span style="font-size:1em;">⚠️</span> ' + (response.message || 'Không thể tải danh sách tài liệu') +
                            '</div>'
                        );
                    }
                },
                error: function(xhr, status, error) {
                    $('#documentsContent').html(
                        '<div class="alert alert-danger">' +
                            '<span style="font-size:1em;">❌</span> Có lỗi xảy ra khi tải tài liệu: ' + error +
                        '</div>'
                    );
                }
            });
        }

        function displayDocuments(documents) {
            if (!documents || !Array.isArray(documents) || documents.length === 0) {
                $('#documentsContent').html(
                    '<div class="text-center py-5">' +
                        '<span style="font-size:4em; color: #6c757d;">📄</span>' +
                        '<h5 class="mt-3 text-muted">Chưa có tài liệu nào</h5>' +
                        '<p class="text-muted">Request này chưa có tài liệu đính kèm</p>' +
                    '</div>'
                );
                return;
            }

            var html = '<div class="documents-list" style="max-height: 450px; overflow-y: auto;">' +
                        '<div class="mb-3 alert alert-info">' +
                            '<span style="font-size:1em;">📊</span>' +
                            '<strong>Tổng cộng: ' + documents.length + ' tài liệu đính kèm</strong>' +
                        '</div>';

            for (var i = 0; i < documents.length; i++) {
                var doc = documents[i];
                var fileIcon = getFileIcon(doc.fileName || 'unknown');

                html += '<div class="document-item">' +
                            '<div class="document-info">' +
                                '<span class="document-icon">' + fileIcon + '</span>' +
                                '<div class="document-details">' +
                                    '<div class="document-name">' + (doc.fileName || 'Tên file không xác định') + '</div>' +
                                    '<div class="document-meta">' +
                                        '<span class="badge bg-light text-dark">' + (doc.fileSize || '0 B') + '</span> •' +
                                        ' Tải lên bởi <strong>' + (doc.uploadedBy || 'N/A') + '</strong> •' +
                                        ' <span class="text-muted">' + (doc.uploadedAt || '') + '</span>' +
                                    '</div>';

                if (doc.description) {
                    html += '<div class="document-description"><em>' + doc.description + '</em></div>';
                }

                html += '</div>' +
                        '</div>' +
                        '<div class="document-actions">' +
                            '<a href="@Url.Action("View", "Document")?id=' + doc.documentId + '"' +
                               ' target="_blank"' +
                               ' class="btn btn-primary btn-sm"' +
                               ' title="Xem tài liệu - Sẽ hiển thị trực tiếp nếu có thể, hoặc tải về nếu không">' +
                                '<span style="font-size:0.8em;">👁️</span> Xem' +
                            '</a>' +
                        '</div>' +
                    '</div>';
            }

            html += '</div>';
            $('#documentsContent').html(html);
        }

        function getFileIcon(fileName) {
            var ext = fileName.split('.').pop().toLowerCase();
            var icons = {
                'pdf': '📄',
                'doc': '📝', 'docx': '📝',
                'xls': '📊', 'xlsx': '📊',
                'png': '🖼️', 'jpg': '🖼️', 'jpeg': '🖼️', 'gif': '🖼️', 'webp': '🖼️',
                'txt': '📃', 'html': '📃',
                'zip': '📦', 'rar': '📦'
            };
            return icons[ext] || '📎';
        }
    </script>
}
<style>
    /* Updated styles for compact design with larger table */
    .btn-success {
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .btn-success:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
        }

    /* Compact Phase Tabs */
    .phase-tabs-container {
        background: #fff;
        border-radius: 12px;
        padding: 0.6rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        border: 1px solid #e9ecef;
    }

    .phase-tabs {
        display: flex;
        gap: 0.5rem;
        justify-content: center;
    }

    .phase-tab {
        flex: 1;
        max-width: 200px;
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 0.8rem 1rem;
        text-decoration: none;
        color: #6c757d;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .phase-tab:hover {
            border-color: #007bff;
            background: #f0f8ff;
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(0, 123, 255, 0.15);
            color: #007bff;
            text-decoration: none;
        }

        .phase-tab.active {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            border-color: #007bff;
            color: white;
            box-shadow: 0 3px 10px rgba(0, 123, 255, 0.3);
        }

            .phase-tab.active:hover {
                color: white;
            }

    .phase-tab-content {
        text-align: center;
    }

    .phase-tab-icon {
        font-size: 1.2rem;
        display: block;
        margin-bottom: 0.3rem;
    }

    .phase-tab-text {
        font-size: 0.85rem;
        font-weight: 600;
        display: block;
        line-height: 1.2;
    }

    /* Compact Statistics Cards */
    .stats-card {
        background: white;
        border-radius: 8px;
        padding: 0.8rem 1rem;
        border: 1px solid #e9ecef;
        transition: all 0.3s ease;
        height: 100%;
        position: relative;
        overflow: hidden;
    }

        .stats-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .stats-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #007bff, #0056b3);
        }

    .stats-card-processing::before {
        background: linear-gradient(90deg, #ffc107, #e68900);
    }

    .stats-card-today::before {
        background: linear-gradient(90deg, #28a745, #20c997);
    }

    .stats-card-content {
        display: flex;
        align-items: center;
        gap: 0.8rem;
    }

    .stats-icon {
        flex-shrink: 0;
    }

    .stats-number {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2d3748;
        line-height: 1;
    }

    .stats-label {
        font-size: 0.8rem;
        color: #718096;
        margin-top: 0.2rem;
    }

    /* Enlarged Table Container */
    .requests-table-container {
        background: white;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
        border: 1px solid #e9ecef;
    }

    .requests-table-large {
        min-height: 70vh;
    }

    .table-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .table-title {
        color: #2d3748;
        font-weight: 600;
        font-size: 1.3rem;
    }

    .table-enhanced {
        margin: 0;
        border: none;
        font-size: 1rem;
    }

    .table-large {
        font-size: 1.05rem;
    }

    .table-head-enhanced {
        background: #f8f9fa;
        border-bottom: 2px solid #e9ecef;
    }

        .table-head-enhanced th {
            border: none;
            padding: 1.2rem 1rem;
            font-weight: 600;
            color: #4a5568;
            font-size: 1rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

    .table-row-enhanced {
        border-bottom: 1px solid #f1f3f4;
        transition: all 0.2s ease;
    }

        .table-row-enhanced:hover,
        .table-row-enhanced.row-hover {
            background-color: #f8f9fa;
            transform: scale(1.002);
        }

        .table-row-enhanced td {
            border: none;
            padding: 1.2rem 1rem;
            vertical-align: middle;
        }

    .request-id-link {
        color: #007bff;
        text-decoration: none;
        font-weight: 600;
        padding: 0.6rem 0.8rem;
        border-radius: 6px;
        transition: all 0.2s ease;
        display: inline-block;
        font-size: 1rem;
    }

        .request-id-link:hover {
            background: #e7f3ff;
            color: #0056b3;
            text-decoration: none;
        }

    .date-info {
        text-align: left;
    }

    .date-primary {
        font-weight: 600;
        color: #2d3748;
        font-size: 1rem;
    }

    .date-secondary {
        font-size: 0.85rem;
        color: #718096;
    }

    .creator-name {
        font-weight: 500;
        color: #4a5568;
        font-size: 1rem;
    }

    .step-badge {
        font-size: 0.85rem;
        padding: 0.6rem 0.8rem;
        border-radius: 8px;
        font-weight: 500;
    }

    .status-badge {
        font-size: 0.85rem;
        padding: 0.6rem 0.8rem;
        border-radius: 8px;
        font-weight: 500;
    }

    .status-completed {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-rejected {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .status-processing {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }

    .action-buttons {
        display: flex;
        gap: 0.6rem;
        justify-content: center;
        align-items: center;
    }

    .btn-action {
        padding: 0.6rem 0.8rem;
        border-radius: 8px;
        border: 1px solid #dee2e6;
        background: white;
        color: #6c757d;
        text-decoration: none;
        transition: all 0.2s ease;
        min-width: 44px;
        text-align: center;
        cursor: pointer;
    }

    .btn-view:hover {
        background: #e7f3ff;
        border-color: #007bff;
        color: #007bff;
    }

    .btn-edit:hover {
        background: #fff5e6;
        border-color: #ffc107;
        color: #e68900;
    }

    .btn-approve:hover {
        background: #eafaf1;
        border-color: #28a745;
        color: #1e7e34;
    }

    .btn-documents:hover {
        background: #f0f8ff;
        border-color: #17a2b8;
        color: #17a2b8;
    }

    .table-footer {
        background: #f8f9fa;
        padding: 1.2rem 1.5rem;
        border-top: 1px solid #e9ecef;
    }

    .table-summary {
        color: #6c757d;
        font-size: 1rem;
    }

    .empty-state-card {
        background: white;
        border-radius: 16px;
        padding: 3rem;
        text-align: center;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
        min-height: 60vh;
    }

    .empty-state-icon {
        margin-bottom: 1.5rem;
        opacity: 0.6;
    }

    .empty-state-title {
        color: #2d3748;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .empty-state-text {
        color: #718096;
        font-size: 1.1rem;
        margin-bottom: 0;
    }

    .custom-alert {
        border: none;
        border-radius: 12px;
        padding: 1rem 1.5rem;
        font-weight: 500;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* CSS cho document modal từ _DocumentViewButton */
    .documents-list {
        max-height: 450px;
        overflow-y: auto;
    }

    .document-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.25rem;
        margin-bottom: 1rem;
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        transition: all 0.3s ease;
    }

        .document-item:hover {
            background: #e9ecef;
            border-color: #007bff;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 123, 255, 0.15);
        }

    .document-info {
        display: flex;
        align-items: flex-start;
        flex: 1;
        gap: 1rem;
    }

    .document-icon {
        font-size: 2em;
        flex-shrink: 0;
    }

    .document-details {
        flex: 1;
    }

    .document-name {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
        font-size: 1rem;
    }

    .document-meta {
        color: #6c757d;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
    }

    .document-description {
        color: #495057;
        font-size: 0.9rem;
        margin-top: 0.5rem;
        padding: 0.5rem;
        background: rgba(0, 123, 255, 0.1);
        border-radius: 6px;
    }

    .document-actions {
        margin-left: 1rem;
        flex-shrink: 0;
    }

    @@media (max-width: 768px) {
        .phase-tabs {
            flex-direction: column;
            gap: 0.5rem;
        }

        .phase-tab {
            max-width: none;
            padding: 0.6rem;
        }

        .phase-tab-icon {
            font-size: 1rem;
            margin-bottom: 0.2rem;
        }

        .phase-tab-text {
            font-size: 0.8rem;
        }

        .stats-card {
            margin-bottom: 0.5rem;
        }

        .stats-card-content {
            flex-direction: column;
            text-align: center;
            gap: 0.5rem;
        }

        .stats-icon {
            align-self: center;
        }

        .stats-number {
            font-size: 1.3rem;
        }

        .table-header {
            flex-direction: column;
            gap: 1rem;
            align-items: stretch;
            padding: 1rem;
        }

        .table-title {
            font-size: 1.1rem;
        }

        .table-enhanced th,
        .table-enhanced td {
            padding: 0.8rem 0.6rem;
            font-size: 0.9rem;
        }

        .action-buttons {
            flex-direction: column;
            gap: 0.3rem;
        }

        .document-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .document-info {
            width: 100%;
        }

        .document-actions {
            margin-left: 0;
            width: 100%;
        }

            .document-actions .btn {
                width: 100%;
            }
    }

    @@media (max-width: 576px) {
        .requests-table-container {
            border-radius: 12px;
        }

        .table-enhanced th,
        .table-enhanced td {
            padding: 0.6rem 0.4rem;
            font-size: 0.85rem;
        }

        .empty-state-card {
            padding: 2rem 1rem;
            min-height: 50vh;
        }

        .phase-tabs-container {
            padding: 0.4rem;
        }

        .stats-card {
            padding: 0.6rem;
        }
    }
    .requests-table-container .table-footer {
        position: sticky;
        bottom: 0;
        background: #f8f9fa;
        border-top: 1px solid #e9ecef;
        padding: 1.2rem 1.5rem;
        margin-top: auto;
    }

    .requests-table-container {
        display: flex;
        flex-direction: column;
    }

    .table-responsive {
        flex: 1;
    }
</style>